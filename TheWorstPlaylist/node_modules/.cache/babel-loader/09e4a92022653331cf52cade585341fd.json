{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MyPreciousDesktop\\\\Desktop\\\\todolist\\\\src\\\\Players.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport getYouTubeID from \"get-youtube-id\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport YouTube from \"react-youtube\";\nimport { updateUrl } from \"./redux/reducers/activeUrlReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Players = () => {\n  _s();\n\n  const song = useSelector(state => state.activeUrl.value);\n  const songList = useSelector(state => state.songList.value);\n  useEffect(() => {//   var t = setTimeout(function(){\n    //     var iframe = document.getElementById('spotifyPlayer') || false;\n    //     var innerDoc = iframe.contentDocument || iframe.contentWindow.document;\n    //     console.log(innerDoc)\n    //     // if (button) {\n    //     //     console.log('Click', button)\n    //     //     button.click()\n    //     // }\n    // }, 999)\n  });\n\n  if (song.source === false) {\n    const opts = {\n      height: '390',\n      width: '640',\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: getYouTubeID(song.url),\n        opts: opts,\n        onEnd: () => loadNextSong(songList)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n        id: \"spotifyPlayer\",\n        style: {\n          borderRadius: \"12px\"\n        },\n        src: \"https://open.spotify.com/embed/track/\" + song.url.match('(?<=\\\\/).{22}(?=\\\\?)') + \"?utm_source=generator\",\n        width: \"100%\",\n        height: \"380\",\n        frameBorder: \"0\",\n        allowFullScreen: \"\",\n        autoPlay: \"1\",\n        allow: \"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this); //\n  }\n};\n\n_s(Players, \"kjf2oOmvQuo+se7EtSkrINL14hs=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = Players;\n\nconst loadNextSong = songList => {\n  _s2();\n\n  const randomSong = songList[Math.floor(Math.random() * songList.length)];\n  const dispatch = useDispatch();\n  dispatch(updateUrl({\n    url: randomSong.url,\n    source: randomSong.source\n  }));\n};\n\n_s2(loadNextSong, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\nexport default Players;\n\nvar _c;\n\n$RefreshReg$(_c, \"Players\");","map":{"version":3,"sources":["C:/Users/MyPreciousDesktop/Desktop/todolist/src/Players.js"],"names":["getYouTubeID","useEffect","useDispatch","useSelector","YouTube","updateUrl","Players","song","state","activeUrl","value","songList","source","opts","height","width","playerVars","autoplay","url","loadNextSong","borderRadius","match","randomSong","Math","floor","random","length","dispatch"],"mappings":";;;;AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,SAAT,QAA0B,mCAA1B;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAMC,IAAI,GAAGJ,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBC,KAA5B,CAAxB;AACA,QAAMC,QAAQ,GAAGR,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACG,QAAN,CAAeD,KAA3B,CAA5B;AACAT,EAAAA,SAAS,CAAC,MAAM,CAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAVU,CAAT;;AAYA,MAAGM,IAAI,CAACK,MAAL,KAAgB,KAAnB,EAAyB;AACzB,UAAMC,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,KAAK,EAAE,KAFE;AAGTC,MAAAA,UAAU,EAAE;AACV;AACAC,QAAAA,QAAQ,EAAE;AAFA;AAHH,KAAb;AAQA,wBAAO;AAAA,6BACH,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEjB,YAAY,CAACO,IAAI,CAACW,GAAN,CAA9B;AAA0C,QAAA,IAAI,EAAEL,IAAhD;AAAsD,QAAA,KAAK,EAAE,MAAIM,YAAY,CAACR,QAAD;AAA7E;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,YAAP;AAIC,GAbD,MAaK;AAGL,wBAAO;AAAA,6BAAK;AAAQ,QAAA,EAAE,EAAC,eAAX;AAA2B,QAAA,KAAK,EAAE;AAACS,UAAAA,YAAY,EAAC;AAAd,SAAlC;AAAyD,QAAA,GAAG,EAAE,0CAA0Cb,IAAI,CAACW,GAAL,CAASG,KAAT,CAAe,sBAAf,CAA1C,GAAmF,uBAAjJ;AAA0K,QAAA,KAAK,EAAC,MAAhL;AAAuL,QAAA,MAAM,EAAC,KAA9L;AAAoM,QAAA,WAAW,EAAC,GAAhN;AAAoN,QAAA,eAAe,EAAC,EAApO;AAAuO,QAAA,QAAQ,EAAC,GAAhP;AAAoP,QAAA,KAAK,EAAC;AAA1P;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,YAAP,CAHK,CAML;AACC;AACJ,CApCD;;GAAMf,O;UACWH,W,EACIA,W;;;KAFfG,O;;AAqCN,MAAMa,YAAY,GAAIR,QAAD,IAAa;AAAA;;AAC9B,QAAMW,UAAU,GAAGX,QAAQ,CAACY,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBd,QAAQ,CAACe,MAApC,CAAD,CAA3B;AACA,QAAMC,QAAQ,GAAGzB,WAAW,EAA5B;AACAyB,EAAAA,QAAQ,CAACtB,SAAS,CAAC;AAACa,IAAAA,GAAG,EAACI,UAAU,CAACJ,GAAhB;AAAqBN,IAAAA,MAAM,EAAEU,UAAU,CAACV;AAAxC,GAAD,CAAV,CAAR;AAEH,CALD;;IAAMO,Y;UAEejB,W;;;AAOpB,eAAeI,OAAf","sourcesContent":["import getYouTubeID from \"get-youtube-id\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport YouTube from \"react-youtube\"\r\nimport { updateUrl } from \"./redux/reducers/activeUrlReducer\";\r\n\r\nconst Players = () => {\r\n    const song = useSelector((state) => state.activeUrl.value)\r\n    const songList = useSelector((state) => state.songList.value)\r\n    useEffect(() => {\r\n    //   var t = setTimeout(function(){\r\n    //     var iframe = document.getElementById('spotifyPlayer') || false;\r\n    //     var innerDoc = iframe.contentDocument || iframe.contentWindow.document;\r\n    //     console.log(innerDoc)\r\n    //     // if (button) {\r\n    //     //     console.log('Click', button)\r\n    //     //     button.click()\r\n    //     // }\r\n    // }, 999)\r\n  });\r\n\r\n    if(song.source === false){\r\n    const opts = {\r\n        height: '390',\r\n        width: '640',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        },\r\n      };\r\n    return(<div>\r\n        <YouTube videoId={getYouTubeID(song.url)} opts={opts} onEnd={()=>loadNextSong(songList)} />\r\n        \r\n        </div>)\r\n    }else{\r\n\r\n      \r\n    return(<div><iframe id=\"spotifyPlayer\" style={{borderRadius:\"12px\"}} src={\"https://open.spotify.com/embed/track/\" + song.url.match('(?<=\\\\/).{22}(?=\\\\?)') + \"?utm_source=generator\"} width=\"100%\" height=\"380\" frameBorder=\"0\" allowFullScreen=\"\" autoPlay=\"1\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"></iframe></div>)\r\n\r\n\r\n    //\r\n    }\r\n}\r\nconst loadNextSong = (songList) =>{\r\n    const randomSong = songList[Math.floor(Math.random() * songList.length)]\r\n    const dispatch = useDispatch()\r\n    dispatch(updateUrl({url:randomSong.url, source: randomSong.source}))\r\n\r\n}\r\n\r\n\r\n\r\n export default Players\r\n"]},"metadata":{},"sourceType":"module"}