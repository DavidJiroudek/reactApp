{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MyPreciousDesktop\\\\Desktop\\\\todolist\\\\src\\\\Players.js\",\n    _s = $RefreshSig$();\n\nimport getYouTubeID from \"get-youtube-id\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport YouTube from \"react-youtube\";\nimport { updateUrl } from \"./redux/reducers/activeUrlReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Players = () => {\n  _s();\n\n  const song = useSelector(state => state.activeUrl.value);\n  const songList = useSelector(state => state.songStore.value);\n  const dispatch = useDispatch();\n\n  if (song.source === false) {\n    const opts = {\n      height: '390',\n      width: '640',\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: getYouTubeID(song.url),\n        opts: opts,\n        onEnd: () => loadNextSong(songList, dispatch)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => loadNextSong(songList, dispatch),\n        children: \"Dal\\u0161\\xED\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: \" 20px auto\"\n        },\n        onClick: () => loadNextSong(songList, dispatch),\n        children: \"Dal\\u0161\\xED\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this); //<iframe id=\"spotifyPlayer\" style={{borderRadius:\"12px\"}} src={\"https://open.spotify.com/embed/track/\" + song.url.match('(?<=\\\\/).{22}(?=\\\\?)') + \"?utm_source=generator\"} width=\"100%\" height=\"380\" frameBorder=\"0\" allowFullScreen=\"\" autoPlay=\"1\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"></iframe>\n  }\n};\n\n_s(Players, \"z4Wi4xtOC77tRa6vCRejfest914=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Players;\n\nconst loadNextSong = (songList, dispatch) => {\n  const randomSong = songList[Math.floor(Math.random() * songList.length)];\n  dispatch(updateUrl({\n    url: randomSong.url,\n    source: randomSong.source\n  }));\n};\n\nexport default Players;\n\nvar _c;\n\n$RefreshReg$(_c, \"Players\");","map":{"version":3,"sources":["C:/Users/MyPreciousDesktop/Desktop/todolist/src/Players.js"],"names":["getYouTubeID","useEffect","useDispatch","useSelector","YouTube","updateUrl","Players","song","state","activeUrl","value","songList","songStore","dispatch","source","opts","height","width","playerVars","autoplay","url","loadNextSong","margin","randomSong","Math","floor","random","length"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,SAAT,QAA0B,mCAA1B;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAMC,IAAI,GAAGJ,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBC,KAA5B,CAAxB;AACA,QAAMC,QAAQ,GAAGR,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACI,SAAN,CAAgBF,KAA5B,CAA5B;AACA,QAAMG,QAAQ,GAAGX,WAAW,EAA5B;;AAGA,MAAGK,IAAI,CAACO,MAAL,KAAgB,KAAnB,EAAyB;AACzB,UAAMC,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,KAAK,EAAE,KAFE;AAGTC,MAAAA,UAAU,EAAE;AACV;AACAC,QAAAA,QAAQ,EAAE;AAFA;AAHH,KAAb;AAQA,wBAAO;AAAA,8BACH,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEnB,YAAY,CAACO,IAAI,CAACa,GAAN,CAA9B;AAA0C,QAAA,IAAI,EAAEL,IAAhD;AAAsD,QAAA,KAAK,EAAE,MAAIM,YAAY,CAACV,QAAD,EAAWE,QAAX;AAA7E;AAAA;AAAA;AAAA;AAAA,cADG,eAEH;AAAQ,QAAA,OAAO,EAAE,MAAIQ,YAAY,CAACV,QAAD,EAAWE,QAAX,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAIC,GAbD,MAaK;AAGL,wBAAO;AAAA,6BACC;AAAQ,QAAA,KAAK,EAAE;AAACS,UAAAA,MAAM,EAAC;AAAR,SAAf;AAAsC,QAAA,OAAO,EAAE,MAAID,YAAY,CAACV,QAAD,EAAWE,QAAX,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAAP,CAHK,CAUL;AACC;AACJ,CA/BD;;GAAMP,O;UACWH,W,EACIA,W,EACAD,W;;;KAHfI,O;;AAgCN,MAAMe,YAAY,GAAG,CAACV,QAAD,EAAWE,QAAX,KAAuB;AACxC,QAAMU,UAAU,GAAGZ,QAAQ,CAACa,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBf,QAAQ,CAACgB,MAApC,CAAD,CAA3B;AACAd,EAAAA,QAAQ,CAACR,SAAS,CAAC;AAACe,IAAAA,GAAG,EAACG,UAAU,CAACH,GAAhB;AAAqBN,IAAAA,MAAM,EAAES,UAAU,CAACT;AAAxC,GAAD,CAAV,CAAR;AAEH,CAJD;;AAQC,eAAeR,OAAf","sourcesContent":["import getYouTubeID from \"get-youtube-id\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport YouTube from \"react-youtube\"\r\nimport { updateUrl } from \"./redux/reducers/activeUrlReducer\";\r\n\r\nconst Players = () => {\r\n    const song = useSelector((state) => state.activeUrl.value)\r\n    const songList = useSelector((state) => state.songStore.value)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    if(song.source === false){\r\n    const opts = {\r\n        height: '390',\r\n        width: '640',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        },\r\n      };\r\n    return(<div>\r\n        <YouTube videoId={getYouTubeID(song.url)} opts={opts} onEnd={()=>loadNextSong(songList, dispatch)} />\r\n        <button onClick={()=>loadNextSong(songList, dispatch)}>Další</button>\r\n        </div>)\r\n    }else{\r\n\r\n      \r\n    return(<div>\r\n            <button style={{margin:\" 20px auto\"}} onClick={()=>loadNextSong(songList, dispatch)}>Další</button>\r\n            \r\n          </div>\r\n    )\r\n\r\n\r\n    //<iframe id=\"spotifyPlayer\" style={{borderRadius:\"12px\"}} src={\"https://open.spotify.com/embed/track/\" + song.url.match('(?<=\\\\/).{22}(?=\\\\?)') + \"?utm_source=generator\"} width=\"100%\" height=\"380\" frameBorder=\"0\" allowFullScreen=\"\" autoPlay=\"1\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"></iframe>\r\n    }\r\n}\r\nconst loadNextSong = (songList, dispatch) =>{\r\n    const randomSong = songList[Math.floor(Math.random() * songList.length)]\r\n    dispatch(updateUrl({url:randomSong.url, source: randomSong.source}))\r\n\r\n}\r\n\r\n\r\n\r\n export default Players\r\n"]},"metadata":{},"sourceType":"module"}