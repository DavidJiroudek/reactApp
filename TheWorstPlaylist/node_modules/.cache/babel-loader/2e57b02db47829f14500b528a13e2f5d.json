{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MyPreciousDesktop\\\\Desktop\\\\todolist\\\\src\\\\Players.js\",\n    _s = $RefreshSig$();\n\nimport getYouTubeID from \"get-youtube-id\";\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport YouTube from \"react-youtube\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Players = () => {\n  _s();\n\n  const song = useSelector(state => state.activeUrl.value);\n  useEffect(() => {//   var t = setTimeout(function(){\n    //     var iframe = document.getElementById('spotifyPlayer') || false;\n    //     var innerDoc = iframe.contentDocument || iframe.contentWindow.document;\n    //     console.log(innerDoc)\n    //     // if (button) {\n    //     //     console.log('Click', button)\n    //     //     button.click()\n    //     // }\n    // }, 999)\n  });\n\n  if (song.source === false) {\n    const opts = {\n      height: '390',\n      width: '640',\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: getYouTubeID(song.url),\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  } else {\n    window.onSpotifyIframeApiReady = IFrameAPI => {\n      let element = /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"embed-iframe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 23\n      }, this);\n\n      let options = {\n        uri: 'spotify:episode:7makk4oTQel546B0PZlDM5'\n      };\n\n      let callback = EmbedController => {};\n\n      IFrameAPI.createController(element, options, callback);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"embed-iframe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this); //<div><iframe id=\"spotifyPlayer\" style={{borderRadius:\"12px\"}} src={\"https://open.spotify.com/embed/track/\" + song.url.match('(?<=\\\\/).{22}(?=\\\\?)') + \"?utm_source=generator\"} width=\"100%\" height=\"380\" frameBorder=\"0\" allowFullScreen=\"\" autoPlay=\"1\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"></iframe></div>\n  }\n};\n\n_s(Players, \"zMW/wpg1DPBFcxuUU72pI5/loyk=\", false, function () {\n  return [useSelector];\n});\n\n_c = Players;\nexport default Players;\n\nvar _c;\n\n$RefreshReg$(_c, \"Players\");","map":{"version":3,"sources":["C:/Users/MyPreciousDesktop/Desktop/todolist/src/Players.js"],"names":["getYouTubeID","useEffect","useSelector","YouTube","Players","song","state","activeUrl","value","source","opts","height","width","playerVars","autoplay","url","window","onSpotifyIframeApiReady","IFrameAPI","element","options","uri","callback","EmbedController","createController"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,OAAP,MAAoB,eAApB;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAMC,IAAI,GAAGH,WAAW,CAAEI,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBC,KAA5B,CAAxB;AAEAP,EAAAA,SAAS,CAAC,MAAM,CAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAVU,CAAT;;AAYA,MAAGI,IAAI,CAACI,MAAL,KAAgB,KAAnB,EAAyB;AACzB,UAAMC,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,KAAK,EAAE,KAFE;AAGTC,MAAAA,UAAU,EAAE;AACV;AACAC,QAAAA,QAAQ,EAAE;AAFA;AAHH,KAAb;AAQA,wBAAO;AAAA,6BACH,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEd,YAAY,CAACK,IAAI,CAACU,GAAN,CAA9B;AAA0C,QAAA,IAAI,EAAEL;AAAhD;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,YAAP;AAIC,GAbD,MAaK;AAEHM,IAAAA,MAAM,CAACC,uBAAP,GAAkCC,SAAD,IAAe;AAC9C,UAAIC,OAAO,gBAAG;AAAK,QAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,cAAd;;AACA,UAAIC,OAAO,GAAG;AACVC,QAAAA,GAAG,EAAE;AADK,OAAd;;AAGA,UAAIC,QAAQ,GAAIC,eAAD,IAAqB,CAAE,CAAtC;;AACAL,MAAAA,SAAS,CAACM,gBAAV,CAA2BL,OAA3B,EAAoCC,OAApC,EAA6CE,QAA7C;AACD,KAPD;;AASF,wBAAO;AAAK,MAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,YAAP,CAXK,CAcL;AACC;AACJ,CA5CD;;GAAMlB,O;UACWF,W;;;KADXE,O;AA6CL,eAAeA,OAAf","sourcesContent":["import getYouTubeID from \"get-youtube-id\";\r\nimport { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport YouTube from \"react-youtube\"\r\n\r\nconst Players = () => {\r\n    const song = useSelector((state) => state.activeUrl.value)\r\n\r\n    useEffect(() => {\r\n    //   var t = setTimeout(function(){\r\n    //     var iframe = document.getElementById('spotifyPlayer') || false;\r\n    //     var innerDoc = iframe.contentDocument || iframe.contentWindow.document;\r\n    //     console.log(innerDoc)\r\n    //     // if (button) {\r\n    //     //     console.log('Click', button)\r\n    //     //     button.click()\r\n    //     // }\r\n    // }, 999)\r\n  });\r\n\r\n    if(song.source === false){\r\n    const opts = {\r\n        height: '390',\r\n        width: '640',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        },\r\n      };\r\n    return(<div>\r\n        <YouTube videoId={getYouTubeID(song.url)} opts={opts} />\r\n        \r\n        </div>)\r\n    }else{\r\n\r\n      window.onSpotifyIframeApiReady = (IFrameAPI) => {\r\n        let element = <div id=\"embed-iframe\"></div>\r\n        let options = {\r\n            uri: 'spotify:episode:7makk4oTQel546B0PZlDM5'\r\n          };\r\n        let callback = (EmbedController) => {};\r\n        IFrameAPI.createController(element, options, callback);\r\n      };\r\n      \r\n    return(<div id=\"embed-iframe\"></div>)\r\n\r\n\r\n    //<div><iframe id=\"spotifyPlayer\" style={{borderRadius:\"12px\"}} src={\"https://open.spotify.com/embed/track/\" + song.url.match('(?<=\\\\/).{22}(?=\\\\?)') + \"?utm_source=generator\"} width=\"100%\" height=\"380\" frameBorder=\"0\" allowFullScreen=\"\" autoPlay=\"1\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"></iframe></div>\r\n    }\r\n}\r\n export default Players\r\n"]},"metadata":{},"sourceType":"module"}